{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "edf1aed4",
   "metadata": {
    "id": "edf1aed4"
   },
   "source": [
    "## Quiz 2 - Probability, Statistics (ლექცია 4, ლექცია 5) - 7 ქულა\n",
    "\n",
    "იხილეთ LoanStatus.csv მონაცემთა ფაილი, რომელშიც მოცემულია კლიენტთა ინფორმაცია შემდეგი სვეტებით:\n",
    "\n",
    "Loan ID - კლიენტის ID\n",
    "\n",
    "Gender - სქესი\n",
    "\n",
    "Married - დაქორზინებული არის თუ არა\n",
    "\n",
    "Dependents - ოჯახის წევრების რაოდენობა, რომლის ფინანსურ მხარდაჭერასაც უზრუნველყოფს კლიენტი\n",
    "\n",
    "Education - არის თუ არა უმაღლესი განათლების მქონე\n",
    "\n",
    "Self_Employed - არის თუ არა თვითდასაქმებული\n",
    "\n",
    "ApplicantIncome - კლიენტის შემოსავალი (per month)\n",
    "\n",
    "LoanAmount  - სესხის რაოდენობა (ათასებში)\n",
    "\n",
    "Loan_Amount_Term - სესხის ვადა\n",
    "\n",
    "Credit_History - როგორი საკრედიტო ისტორია აქვს კლიენტს (1-კარგი, 0-ცუდი)\n",
    "\n",
    "Property_Area - საცხოვრებელი და სამუშაო ადგილი\n",
    "\n",
    "Loan_Status - სესხის გაცემის სტატუსი\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b4fc6c6",
   "metadata": {
    "id": "3b4fc6c6"
   },
   "source": [
    "## დავალება 1: აღწერილობითი სტატისტიკა  (1 ქულა)\n",
    "ა) გახსენით ფაილი და დაბეჭდეთ აღწერილობითი სტატისტიკის მონაცემები თქვენთვის საინტერესო ველებისთვის, როგორიცაა საშუალო, მედიანა, მოდა, სტდ. გადახრა, ა.შ. (მოახდინეთ სიტყვიერი ინტერპრეტაცია);\n",
    "\n",
    "ბ) დაითვალეთ თითოეულ სვეტში ცარიელი მნიშვნელობების რაოდენობა შესაბამისი ფუნქციით"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b786db79",
   "metadata": {
    "id": "b786db79"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "\n",
    "from scipy.stats import norm\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1abee773",
   "metadata": {
    "id": "1abee773"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Loan_ID  Gender Married Dependents     Education Self_Employed  \\\n",
      "0    LP001002    Male      No          0      Graduate            No   \n",
      "1    LP001003    Male     Yes          1      Graduate            No   \n",
      "2    LP001005    Male     Yes          0      Graduate           Yes   \n",
      "3    LP001006    Male     Yes          0  Not Graduate            No   \n",
      "4    LP001008    Male      No          0      Graduate            No   \n",
      "..        ...     ...     ...        ...           ...           ...   \n",
      "609  LP002978  Female      No          0      Graduate            No   \n",
      "610  LP002979    Male     Yes         3+      Graduate            No   \n",
      "611  LP002983    Male     Yes          1      Graduate            No   \n",
      "612  LP002984    Male     Yes          2      Graduate            No   \n",
      "613  LP002990  Female      No          0      Graduate           Yes   \n",
      "\n",
      "     ApplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n",
      "0               5849         NaN             360.0             1.0   \n",
      "1               4583       128.0             360.0             1.0   \n",
      "2               3000        66.0             360.0             1.0   \n",
      "3               2583       120.0             360.0             1.0   \n",
      "4               6000       141.0             360.0             1.0   \n",
      "..               ...         ...               ...             ...   \n",
      "609             2900        71.0             360.0             1.0   \n",
      "610             4106        40.0             180.0             1.0   \n",
      "611             8072       253.0             360.0             1.0   \n",
      "612             7583       187.0             360.0             1.0   \n",
      "613             4583       133.0             360.0             0.0   \n",
      "\n",
      "    Property_Area Loan_Status  \n",
      "0           Urban           Y  \n",
      "1           Rural           N  \n",
      "2           Urban           Y  \n",
      "3           Urban           Y  \n",
      "4           Urban           Y  \n",
      "..            ...         ...  \n",
      "609         Rural           Y  \n",
      "610         Rural           Y  \n",
      "611         Urban           Y  \n",
      "612         Urban           Y  \n",
      "613     Semiurban           N  \n",
      "\n",
      "[614 rows x 12 columns]\n",
      "       ApplicantIncome\n",
      "count       614.000000\n",
      "mean       5403.459283\n",
      "std        6109.041673\n",
      "min         150.000000\n",
      "25%        2877.500000\n",
      "50%        3812.500000\n",
      "75%        5795.000000\n",
      "max       81000.000000\n"
     ]
    }
   ],
   "source": [
    "\n",
    "dt = pd.read_csv('LoanStatus.csv')\n",
    "print(dt)\n",
    "\n",
    "\n",
    "## a) არჩეული სვეტების სტატისტიკის დაპრინტვა\n",
    "columns = ['Loan_Status', 'ApplicantIncome']\n",
    "print(dt[columns].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eacde097",
   "metadata": {
    "id": "eacde097"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_ID              0\n",
      "Gender              13\n",
      "Married              3\n",
      "Dependents          15\n",
      "Education            0\n",
      "Self_Employed       32\n",
      "ApplicantIncome      0\n",
      "LoanAmount          22\n",
      "Loan_Amount_Term    14\n",
      "Credit_History      50\n",
      "Property_Area        0\n",
      "Loan_Status          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "## b) ცარიელი მნიშვნელობების რაოდენობა თითოეულ სვეტში\n",
    "print(dt.isna().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "765decd7",
   "metadata": {
    "id": "765decd7"
   },
   "source": [
    "## დავალება 2:  ალბათობა (1 ქულა)\n",
    "ა) დაითვალეთ, რა არის სესხის აღების ალბათობა Loan_Status-ის მიხედვით.\n",
    "\n",
    "ბ) რა არის სესხის აღების ალბათობა, მაშინ როცა კლიენტს კარგი საკრედიტო ისტორია აქვს.\n",
    "\n",
    "კოდს დაურთეთ თქვენი კომენტარები მოკლედ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "98aafed8",
   "metadata": {
    "id": "98aafed8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loan_approval_probability: 0.6872964169381107\n"
     ]
    }
   ],
   "source": [
    "## a) სესხის აღების ალბათობა Loan_Status-ის მიხედვით\n",
    "loan_approval_probability = dt['Loan_Status'].value_counts(normalize=True)['Y']\n",
    "print(f\"loan_approval_probability: {loan_approval_probability}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2a3f23c",
   "metadata": {
    "id": "b2a3f23c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "credit_approval_probability: 0.7957894736842105\n"
     ]
    }
   ],
   "source": [
    "## b) სესხის აღების ალბათობა საკრედიტო ისტორიიდან გამომდინარე\n",
    "credit_approval_probability = dt[dt['Credit_History'] == 1]['Loan_Status'].value_counts(normalize=True)['Y']\n",
    "print(f\"credit_approval_probability: {credit_approval_probability}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8307cf58",
   "metadata": {
    "id": "8307cf58"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "80eb6167",
   "metadata": {
    "id": "80eb6167"
   },
   "source": [
    "## დავალება 3: გრაფიკული წარმოდგენა (1 ქულა)\n",
    "ა) seaborn.distplot ან seaborn.histplot() ფუნქციის გამოყენებით, ააგეთ რომელიმე სვეტისთვის შესაბამისი გრაფიკი. ლინკი: https://seaborn.pydata.org/generated/seaborn.distplot.html\n",
    "\n",
    "ბ) matplotlib.pyplot.hist ფუნქციის გამოყენებით, ააგეთ რომელიმე სვეტისთვის შესაბამისი ჰისტოგრამი, რომელშიც bin-ების (ჰოსტოგრამაში ბლოკების) რაოდენობას თქვენ განსაზღვრავთ (მაგ. ჰისტოგრამაში 10 სვეტად წარმოადგინოთ მონაცემები.) იხ. დოკუმენტაცია შემდეგ ლინკზე: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html\n",
    "\n",
    "Future warnings-ების გამოსართავად ჩაწერეთ შემდეგი ბრძანებები:\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "კოდს დაურთეთ თქვენი კომენტარები მოკლედ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4acb2e7f",
   "metadata": {
    "id": "4acb2e7f"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6e98aca4",
   "metadata": {
    "id": "6e98aca4"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## a) გრაფიკი Loan_Amount_Term სვეტის\n",
    "sns.distplot(dt['Loan_Amount_Term'].dropna())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "47399106",
   "metadata": {
    "id": "47399106"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## b) Married სვეტის ჰისტოგრამი 15 ბლოკით\n",
    "\n",
    "plt.hist(dt['Married'].dropna(), bins=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7331343b",
   "metadata": {
    "id": "7331343b"
   },
   "source": [
    "## დავალება 4:  კუმულაციური ალბათობა (Cumulative distribution function) - (1 ქულა)\n",
    "დაითვალეთ შემდეგი კუმულაციური ალბათობა scipy.stats.norm.cdf() ფუნქციის გამოყენებით.\n",
    "დაითვალეთ კლიენტების რამდენ პროცენტს აქვს შემოსავალი 2000 ევროზე ნაკლები ყოველთვიურად.\n",
    "norm.cdf(x, mean_val, std_dev_val) ფუნქციის პირველი პარამეტრია სასაზღვრო მნიშვნელობა, მეორე- საშუალო, მესამე -სტდ. გადახრა.\n",
    "\n",
    "#### მოახდინეთ შედეგების სიტყვიერი ინტერპრეტაცია"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "be4adcf9",
   "metadata": {
    "id": "be4adcf9"
   },
   "outputs": [],
   "source": [
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ea939c97",
   "metadata": {
    "id": "ea939c97"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "probability less than 2000: 0.28872328177095585\n"
     ]
    }
   ],
   "source": [
    "## პროცენტის გამოთვლა კუმულაციური ალბათობით იმ კლიენტებისა, ვისაც 2000ზე ნაკლები შემოსავალი აქვს\n",
    "\n",
    "mean_loan_amount = dt['ApplicantIncome'].mean()\n",
    "std_loan_amount = dt['ApplicantIncome'].std()\n",
    "probability_less_than_2000 = norm.cdf(2000, mean_loan_amount, std_loan_amount)\n",
    "print(f\"probability less than 2000: {probability_less_than_2000}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac6083ba",
   "metadata": {
    "id": "ac6083ba"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ab5b9a5b",
   "metadata": {
    "id": "ab5b9a5b"
   },
   "source": [
    "## დავალება 5: სტატისტიკა (1 ქულა)\n",
    "\n",
    "ააგეთ 2 boxplot დიაგრამა seaborn.boxplot() ფუნქციის გამოყენებით რომელიმე ველის მიმართ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "60901cb8",
   "metadata": {
    "id": "60901cb8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Gender', y='Dependents', data=dt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d0d8a3bc",
   "metadata": {
    "id": "d0d8a3bc"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=dt['Education'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae13cb5",
   "metadata": {
    "id": "4ae13cb5"
   },
   "source": [
    "## დავალება 6: t-test (2 ქულა)\n",
    "ა) გააკეთეთ t-test ანალიზი (One sample t-test)  რომელიმე სვეტის მიმართ და გამოიყენეთ  ttest_1samp ფუნქცია.\n",
    "\n",
    "ბ) გააკეთეთ t-test ანალიზი (Two sample t-test) რომელიმე სვეტის მიმართ და გამოიყენეთ  ttest_ind ფუნქცია.\n",
    "\n",
    "განსაზღვრეთ ნულოვანი და ალტერნატიული ჰიპოთეზა, გამოიყენეთ აღნიშნული ფუნქციები და მოახდინეთ შედეგების სიტყვიერი ინტერპრეტაცია."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f05f6747",
   "metadata": {
    "id": "f05f6747"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-statistic for Applicant Income: nan, P-value for Applicant Income: nan\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import ttest_1samp\n",
    "\n",
    "## a) გამოთვლა Loan_Amount_Term სვეტის საშუალო მაჩვენებლის და One sample t-test ანალიზის ჩვენება\n",
    "from scipy.stats import ttest_1samp\n",
    "\n",
    "t_stat_applicant_income, p_value_applicant_income = ttest_1samp(dt['Loan_Amount_Term'], dt['Loan_Amount_Term'].mean())\n",
    "print(f\"T-statistic for Applicant Income: {t_stat_applicant_income}, P-value for Applicant Income: {p_value_applicant_income}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "116b95c4",
   "metadata": {
    "id": "116b95c4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t_stat_credit: nan, p_value_credit: nan\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import ttest_ind\n",
    "\n",
    "## b) One sample t-test ანალიზის ჩვენება Credit_History სვეტის გაფილტრული მაჩვენებლით(1.0, 0.0) \n",
    "credit_inc = dt[dt['Credit_History'] == '1.0']['ApplicantIncome']\n",
    "credit_nan_inc = dt[dt['Credit_History'] == '0.0']['ApplicantIncome']\n",
    "t_stat_credit, p_value_credit = ttest_ind(credit_inc, credit_nan_inc)\n",
    "print(f\"t_stat_credit: {t_stat_credit}, p_value_credit: {p_value_credit}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50382630-01e6-45e3-9286-9e0dc599dd60",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
